/** @type {import("eslint").Linter.RulesRecord} */
export const myEslintRules = {
  quotes: [
    'error',
    'single',
    { avoidEscape: true, allowTemplateLiterals: true },
  ],
  '@typescript-eslint/consistent-type-assertions': 'off',
  '@typescript-eslint/explicit-function-return-type': 'off',
  '@typescript-eslint/explicit-member-accessibility': 'off',
  '@typescript-eslint/explicit-module-boundary-types': 'off',
  '@typescript-eslint/method-signature-style': ['error', 'property'],
  '@typescript-eslint/no-explicit-any': 'off',
  '@typescript-eslint/no-unsafe-assignment': 'off',
  '@typescript-eslint/no-unsafe-call': 'off',
  '@typescript-eslint/no-unsafe-member-access': 'off',
  '@typescript-eslint/no-unsafe-argument': 'off',
  '@typescript-eslint/no-unsafe-return': 'off',
  '@typescript-eslint/no-misused-promises': 'off',
  '@typescript-eslint/no-floating-promises': 'off',
  '@typescript-eslint/no-inferrable-types': 'off',
  '@typescript-eslint/no-magic-numbers': [
    'error',
    {
      ignore: [0, 1, -1, 2, 3],
      ignoreArrayIndexes: true,
      enforceConst: true,
      ignoreDefaultValues: true,
    },
  ],
  '@typescript-eslint/no-unnecessary-type-parameters': 'off',
  '@typescript-eslint/no-unused-vars': [
    'warn',
    {
      args: 'all',
      argsIgnorePattern: '^_',
      caughtErrors: 'all',
      caughtErrorsIgnorePattern: '^_',
      destructuredArrayIgnorePattern: '^_',
      vars: 'all',
      varsIgnorePattern: '^_',
      ignoreRestSiblings: true,
    },
  ],
  '@typescript-eslint/no-use-before-define': 'off',
  '@typescript-eslint/no-useless-empty-export': 'error',
  '@typescript-eslint/require-array-sort-compare': 'error',
  '@typescript-eslint/restrict-template-expressions': 'off',
  '@typescript-eslint/unbound-method': ['error', { ignoreStatic: true }],
  '@typescript-eslint/prefer-nullish-coalescing': 'off',
  '@typescript-eslint/no-unnecessary-condition': 'off',
  '@typescript-eslint/use-unknown-in-catch-callback-variable': 'off',
  '@typescript-eslint/no-base-to-string': 'off',
  '@typescript-eslint/require-await': 'off',
  '@typescript-eslint/no-misused-spread': 'off',
  'react/prop-types': 'off',
  'react/display-name': 'error',
  'react/jsx-uses-react': 'off',
  'react/react-in-jsx-scope': 'off',
  'react/jsx-key': 'error',
  'react/no-array-index-key': 'off',
  'react/self-closing-comp': 'error',
  'react/jsx-boolean-value': ['error', 'never'],

  'import/no-cycle': 'off',
  'import/extensions': 'off',
  'import/prefer-default-export': 'off',
  'import/no-unresolved': 'off',
  'import/no-duplicates': 'off',
  'class-methods-use-this': 'off',
  curly: ['error', 'all'],
  'dot-notation': 'off',
  'implicit-arrow-linebreak': 'off',
  'function-paren-newline': 'off',
  'operator-linebreak': 'off',
  'object-curly-newline': 'off',
  'max-len': [
    'error',
    {
      code: 120,
      ignoreComments: true,
      ignoreTemplateLiterals: true,
      ignoreStrings: true,
    },
  ],
  'max-lines-per-function': [
    'error',
    { max: 100, skipBlankLines: true, skipComments: true },
  ],
  'no-console': ['error', { allow: ['warn'] }],
  'no-empty-function': 'off',
  '@typescript-eslint/no-empty-function': 'off',
  'prefer-const': 'error',
  'no-var': 'error',
  eqeqeq: ['error', 'always'],
  'lines-between-class-members': [
    'error',
    'always',
    { exceptAfterSingleLine: true },
  ],
  'object-curly-spacing': ['error', 'always'],
  'comma-dangle': ['error', 'only-multiline'],

  'unicorn/no-null': 'off',
  'unicorn/prefer-global-this': 'off',
  'unicorn/prefer-query-selector': 'off',
  'unicorn/prevent-abbreviations': [
    'error',
    { allowList: { props: true, Props: true, e: true } },
  ],
  'unicorn/explicit-length-check': 'off',
  'unicorn/filename-case': [
    'error',
    {
      cases: {
        kebabCase: false,
        camelCase: true,
        pascalCase: true,
      },
    },
  ],
  'unicorn/consistent-function-scoping': 'off',
  'perfectionist/sort-imports': 'off',
};
